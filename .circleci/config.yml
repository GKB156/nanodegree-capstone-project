# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.0

orbs:
  aws-eks: circleci/aws-eks@<<pipeline.parameters.dev-orb-version>>
  kubernetes: circleci/kubernetes@1.3

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual env
          command: |
            python3 -m venv venv
            . venv/bin/activate
      - run:
          name: Install dependencies
          command: |
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Run linters
          command: |
            . venv/bin/activate
              make lint

  test-cluster:
    docker:
      - image: "cimg/python:3.10"
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

workflows:
  deployment:
    jobs:
      - build
      - aws-eks/create-cluster:
          cluster-name: my-eks-demo
      - test-cluster:
          cluster-name: my-eks-demo
          requires:
            - aws-eks/create-cluster
      - aws-eks/delete-cluster:
          cluster-name: my-eks-demo
          requires:
            - test-cluster

  # push-docker-image:
  #   docker:
  #     - image: python:3.7.3-stretch
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - v1-dependencies-{{ checksum "requirements.txt" }}
  #           # fallback to using the latest cache if no exact match is found
  #           - v1-dependencies-

  # deploy-docker-container:
  #   #kubectl apply -f deployment.yml
  #   docker:
  #     - image: python:3.7.3-stretch
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - v1-dependencies-{{ checksum "requirements.txt" }}
  #           # fallback to using the latest cache if no exact match is found
  #           - v1-dependencies-
