version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-ecr: circleci/aws-ecr@8.1.2
  kubernetes: circleci/kubernetes@1.3.0

jobs:
  run-linter:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual env
          command: |
            python3 -m venv venv
            . venv/bin/activate
      - run:
          name: Install dependencies
          command: |
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run linters
          command: |
            . venv/bin/activate
              make lint

  build-docker-image:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            export TAG=latest
            export IMAGE_NAME=${REPO_NAME}
            docker build -t $IMAGE_NAME:$TAG .

  deploy-application:
    docker:
      - image: "cimg/base:stable"
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          envsubst: true
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment.apps/capstone-server
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          envsubst: true
          resource-file-path: service.yml
          resource-name: service/capstone-project-service
          show-kubectl-command: true

  test-application:
    docker:
      - image: "cimg/base:stable"
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
      expected-version-info:
        description: |
          Expected app version (for testing that the
          correct version has been deployed)
        type: string
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services

  undeploy-application:
    docker:
      - image: "cimg/base:stable"
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "app=web"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods

workflows:
  default:
    jobs:
      - run-linter
      - build-docker-image
        requires:
          - run-linter
      - aws-ecr/build-and-push-image:
          requires:
            - build-docker-image
          aws-cli-version: latest
          aws-access-key-id: AWS_ACCESS_KEY_ID
          registry-id: REGISTRY_ID
          region: "${AWS_DEFAULT_REGION}"
          repo: capstone-project
          tag: latest
      - deploy-application:
          cluster-name: EKS-Capstone-Cluster
          aws-region: "$AWS_DEFAULT_REGION"
          docker-image-name: "${AWS_ECR_URL}:latest"
          version-info: "${CIRCLE_SHA1}"
          requires:
            - aws-ecr/build-and-push-image
      - test-application:
          cluster-name: EKS-Capstone-Cluster
          aws-region: "$AWS_DEFAULT_REGION"
          expected-version-info: "${CIRCLE_SHA1}"
          requires:
            - deploy-application
      - undeploy-application:
          cluster-name: EKS-Capstone-Cluster
          aws-region: "$AWS_DEFAULT_REGION"
          requires:
            - test-application
      # - aws-eks/delete-cluster:
      #     cluster-name: EKS-Capstone-Cluster
      #     aws-region: "$AWS_DEFAULT_REGION"
      #     wait: true
      #     requires:
      #       - undeploy-application
