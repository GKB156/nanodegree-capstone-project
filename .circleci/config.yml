# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  build-env:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual env
          command: |
            python3 -m venv venv
            . venv/bin/activate
      - run:
          name: Install dependencies
          command: |
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run linters
          command: |
            . venv/bin/activate
              make lint

  build-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==2.3.3 \
              awscli==2.1.27
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
    # docker:
    #   - image: cimg/base:stable
    # working_directory: ~/repo
    # steps:
    #   - checkout
    #   # Download and cache dependencies
    #   - restore_cache:
    #       keys:
    #         - v1-dependencies-{{ checksum "requirements.txt" }}
    #         # fallback to using the latest cache if no exact match is found
    #         - v1-dependencies-
    #   - run:
    #       name: Build docker image
    #       command: |
    #         docker image build -t flask_app .
    #         echo "Docker image built"

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum -y install tar gzip

workflows:
  deployment:
    jobs:
      - build-env
      - build-docker-image
# Build environment
# Lint docker image
# Build docker image
# Create ECR repo (or check it exists)
