# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  build-env:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual env
          command: |
            python3 -m venv venv
            . venv/bin/activate
      - run:
          name: Install dependencies
          command: |
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run linters
          command: |
            . venv/bin/activate
              make lint

  build-docker-image:
    docker:
      - image: docker:19.03.15
    steps:
      - checkout
      # - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            apk add --update py-pip
            pip install \
              docker-compose \
              awscli
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
          paths:
            - ./venv
            - /caches/app.tar

      - run:
          name: Ensure ECR exists
          command: |
            aws ecr describe-repositories --repository-names ${REPO_NAME} || aws ecr create-repository --repository-name ${REPO_NAME}

      - run:
          name: Push application Docker image
          command: |
            export ECR_AWS_URI=$(aws ecr describe-repositories \
              --repository-names ${REPO_NAME} \
              --query 'repositories[*].repositoryUri' \
              --output text)
            echo ECR_AWS_URI: ${ECR_AWS_URI}
            echo CIRCLE_BRANCH: ${CIRCLE_BRANCH}
            echo REPO_NAME: ${REPO_NAME}
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              aws ecr get-login-password --region us-east-1 | docker login\
              --username AWS --password-stdin\
              343591568300.dkr.ecr.us-east-1.amazonaws.com
              docker build -t capstone-project .
              docker tag ${REPO_NAME}:latest ${ECR_AWS_URI}:latest
              docker push ${ECR_AWS_URI}:latest
            fi

  # deploy-infrastructure:
  #   docker:
  #     - image: python:3.7.3-stretch
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - v1-dependencies-{{ checksum "requirements.txt" }}
  #           # fallback to using the latest cache if no exact match is found
  #           - v1-dependencies-
  #         paths:
  #           - ./venv

  #     - run:
  #         name: Install awscli and docker
  #         command: |
  #           pip3 install --upgrade pip
  #           pip3 install awscli
  #           pip3 install docker

  #     - run:
  #         name: Ensure ECR exists
  #         command: |
  #           aws ecr describe-repositories --repository-names ${REPO_NAME} || aws ecr create-repository --repository-name ${REPO_NAME}

  #     - run:
  #         name: Push application Docker image
  #         command: |
  #           export ECR_AWS_URI=$(aws ecr describe-repositories \
  #             --repository-names ${REPO_NAME} \
  #             --query 'repositories[*].repositoryUri' \
  #             --output text)

  #           echo ECR_AWS_URI: ${ECR_AWS_URI}
  #           echo CIRCLE_BRANCH: ${CIRCLE_BRANCH}
  #           echo REPO_NAME: ${REPO_NAME}

  #           if [ "${CIRCLE_BRANCH}" == "main" ]; then
  #             aws ecr get-login-password --region us-east-1 | docker login\
  #             --username AWS --password-stdin\
  #             343591568300.dkr.ecr.us-east-1.amazonaws.com
  #             docker build -t capstone-project .
  #             docker tag ${REPO_NAME}:latest ${ECR_AWS_URI}:latest
  #             docker push ${ECR_AWS_URI}:latest
  #           fi
  # - run:
  #     name: Ensure aws infrastructure exists
  #     command: |
  #       aws cloudformation deploy \
  #         --template-file aws-infra.yml \
  #         --tags project=captstone \
  #         --stack-name "capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
  #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  deployment:
    jobs:
      - build-env
      - build-docker-image
      # - deploy-infrastructure:
      #     requires: [build-env]
      # - deploy-infrastructure:
      #     requires: [build-docker-image]
# Build environment to lint project files
# Lint docker image and python files
# Create ECR repo (or check it exists)
# Build docker image/push docker image
# Create rest of AWS infra
