# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  lint-docker:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual env
          command: |
            python3 -m venv venv
            . venv/bin/activate
      - run:
          name: Install dependencies
          command: |
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run linters
          command: |
            . venv/bin/activate
              make lint

  build-and-push-docker-image:
    docker:
      - image: guitarrapc/docker-awscli-kubectl
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Ensure ECR exists
          command: |
            aws ecr describe-repositories --repository-names ${REPO_NAME} || aws ecr create-repository --repository-name ${REPO_NAME}

      - run:
          name: Push application Docker image
          command: |
            export ECR_AWS_URI=$(aws ecr describe-repositories \
              --repository-names ${REPO_NAME} \
              --query 'repositories[*].repositoryUri' \
              --output text)
            echo ECR_AWS_URI: ${ECR_AWS_URI}
            echo CIRCLE_BRANCH: ${CIRCLE_BRANCH}
            echo REPO_NAME: ${REPO_NAME}
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              aws ecr get-login-password --region us-east-1 | docker login\
              --username AWS --password-stdin\
              ${ECR_AWS_URI}
              docker build -t capstone-project .
              docker tag ${REPO_NAME}:latest ${ECR_AWS_URI}:latest
              docker push ${ECR_AWS_URI}:latest
            fi

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure aws infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file aws-infra.yml \
              --tags project=capstone \
              --stack-name "capstone-project" \
              --parameter-overrides ID="capstone-project"

  deploy-clusters:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin

      - run:
          name: Spin up ECS cluster
          command: |
            export CHECK_NAME==$(aws eks list-clusters --query 'clusters[0]')

            if [ "$CHECK_NAME" != "" ]; then
                echo "$CHECK_NAME already exists, will use existing cluster"
                exit 0
            else
                echo "No cluster by this name $CHECK_NAME, will continue"
                eksctl create cluster -f cluster.yml
            fi

  deploy-app-to-clusters:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --update openssl
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            openssl sha1 -sha256 kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            mv ./kubectl /usr/local/bin/kubectl
            kubectl version --short --client
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

      - run:
          name: Deploy app to cluster
          command: |
            kubectl apply -f deployment.yml
            kubectl get svc

      - run:
          name: Run service
          command: |
            kubectl apply -f service.yml
            kubectl get services

workflows:
  deployment:
    jobs:
      - lint-docker
      - build-and-push-docker-image
      - deploy-infrastructure:
          requires: [build-and-push-docker-image]
      - deploy-clusters:
          requires: [deploy-infrastructure]
      - deploy-app-to-clusters:
          requires: [deploy-clusters]
# Build environment to lint project files - DONE
# Lint docker image and python files - DONE
# Create ECR repo (or check it exists) - DONE
# Build docker image/push docker image - DONE
# Create rest of AWS infra
# Create clusters - eksctl create cluster
# Apply deployment to clusters
