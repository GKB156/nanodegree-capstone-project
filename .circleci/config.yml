version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.3
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  run-linter:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Create virtual env
          command: |
            python3 -m venv venv
            . venv/bin/activate
      - run:
          name: Install dependencies
          command: |
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run linters
          command: |
            . venv/bin/activate
              make lint

  build-docker-image:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker Image
          command: |
            export TAG=v${CIRCLE_BUILD_NUM}
            export IMAGE_NAME=${REPO_NAME}
            docker build -t $IMAGE_NAME:$TAG .

  # push-docker-image:
  #   docker:
  #     - image: guitarrapc/docker-awscli-kubectl
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #         version: 19.03.13
  #     - run:
  #         name: Ensure centralised repo exists
  #         command: |
  #           aws ecr describe-repositories --repository-names ${REPO_NAME} || aws ecr create-repository --repository-name ${REPO_NAME}

  #     - run:
  #         name: Push docker image centralised repo
  #         command: |
  #           export TAG=v${CIRCLE_BUILD_NUM}
  #           export IMAGE_NAME=$(aws ecr describe-repositories \
  #             --repository-names ${REPO_NAME} \
  #             --query 'repositories[*].repositoryUri' \
  #             --output text)
  #           echo IMAGE_NAME: ${IMAGE_NAME}
  #           echo CIRCLE_BRANCH: ${CIRCLE_BRANCH}
  #           echo REPO_NAME: ${REPO_NAME}
  #           if [ "${CIRCLE_BRANCH}" == "main" ]; then
  #             aws ecr get-login-password --region us-east-1 | docker login\
  #             --username AWS --password-stdin\
  #             ${IMAGE_NAME}
  #             docker build -t $IMAGE_NAME:$TAG .
  #             # docker tag ${REPO_NAME}:latest ${IMAGE_NAME}:latest
  #             docker push ${IMAGE_NAME}:$TAG
  #           fi
  # deploy-application:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #     docker-image-name:
  #       description: |
  #         Name of the docker image to be deployed
  #       type: string
  #     version-info:
  #       description: |
  #         App version information
  #       type: string
  #     aws-region:
  #       description: |
  #         AWS region
  #       type: string
  #       default: "us-west-2"
  #   steps:
  #     - checkout
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #         install-kubectl: true
  #         aws-region: << parameters.aws-region >>
  #     - kubernetes/create-or-update-resource:
  #         resource-file-path: "deployments/deployment.yml"
  #         get-rollout-status: true
  #         resource-name: deployment/capstone
  #     - kubernetes/create-or-update-resource:
  #         resource-file-path: "deployments/deployment.yml"

  # test-application:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #     aws-region:
  #       description: |
  #         AWS region
  #       type: string
  #       default: ""
  #     expected-version-info:
  #       description: |
  #         Expected app version (this is used for testing that the
  #         correct version has been deployed)
  #       type: string
  #   steps:
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #         install-kubectl: true
  #         aws-region: << parameters.aws-region >>
  #     - run:
  #         name: Wait for service to be ready
  #         command: |
  #           kubectl get pods
  #           kubectl get services
  # undeploy-application:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #     aws-region:
  #       description: |
  #         AWS region
  #       type: string
  #       default: ""
  #   steps:
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #         install-kubectl: true
  #         aws-region: << parameters.aws-region >>
  #     - kubernetes/delete-resource:
  #         resource-types: "deployment,service"
  #         label-selector: "app=capstone"
  #         wait: true
  #     - run:
  #         name: Check on pod status
  #         command: |
  #           kubectl get pods
workflows:
  default:
    jobs:
      - run-linter
      - build-docker-image
      # - push-docker-image:
      #     requires:
      #       - [build-docker-image]
      - aws-ecr/build_and_push_image:
          name: build-and-push-image-ecr
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: capstone-project
          dockerfile: ~/project/Dockerfile
          path: ~/project/
          tag: v${CIRCLE_BUILD_NUM}
      # - aws-eks/create-cluster:
      #     cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
      #     aws-region: $AWS_DEFAULT_REGION
      #     requires:
      #       - build-and-push-image-ecr
      # - deploy-application:
      #     cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
      #     aws-region: $AWS_DEFAULT_REGION
      #     docker-image-name: "${AWS_ECR_URL}/eks_orb_capstone_project:${CIRCLE_SHA1}"
      #     version-info: "${CIRCLE_SHA1}"
      #     requires:
      #       - aws-eks/create-cluster
      # - test-application:
      #     cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
      #     aws-region: $AWS_DEFAULT_REGION
      #     expected-version-info: "${CIRCLE_SHA1}"
      #     requires:
      #       - deploy-application
      # - undeploy-application:
      #     cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
      #     aws-region: $AWS_DEFAULT_REGION
      #     requires:
      #       - test-application
      # - aws-eks/delete-cluster:
      #     cluster-name: eks-orb-capstone-project-deployment-${CIRCLE_WORKFLOW_ID:0:7}
      #     aws-region: $AWS_DEFAULT_REGION
      #     wait: true
      #     requires:
      #       - undeploy-application
